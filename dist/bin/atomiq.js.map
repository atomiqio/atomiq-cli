{"version":3,"sources":["../../src/bin/atomiq.js"],"names":[],"mappings":"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","file":"atomiq.js","sourcesContent":["\n\n/* eslint-disable no-console */\n\n// init babel and stack trace support\nimport 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport App from '../lib/commands/App';\nimport chalk from 'chalk';\nimport cli from 'commander';\nimport prompt from 'prompt';\nimport debug from 'debug';\nimport path from 'path';\nimport pkg from '../../package.json';\n\ncli\n  .version(pkg.version)\n  .command('make <task>', 'build tasks')\n  ;\n\nlet map = new Map([\n  [ 'new', { description: 'Create a new atomiq app', action: create }],\n  [ 'run', { description: 'Create a new atomiq app', action: runContainer }],\n  [ 'test', { description: 'Create a new atomiq app', action: testContainer }],\n  [ 'debug', { description: 'Create a new atomiq app', action: debugContainer }]\n]);\n\nfor (let [key, value] of map) {\n  cli\n    .command(key)\n    .description(value.description)\n    .action(value.action)\n    ;\n}\n\ncli.parse(process.argv);\n\n/**\n * Create a new app.\n */\nfunction create(options) {\n  const log = debug('atomiq:app:new');\n  log('Creating a new app');\n\n  let source = path.join(__dirname, '../../generator/app/template');\n  let dest = process.cwd();\n  let context = {\n    name: 'app'\n  };\n\n  prompt.message = chalk.blue('atomiq');\n  prompt.delimiter = chalk.cyan(':');\n\n  prompt.start();\n  prompt.get(['appname'], (err, result) => {\n    if (err) {\n      console.log('[%s] %s', chalk.red('error'), err.message);\n      process.exit(1);\n    }\n    context.name = result.appname;\n    try {\n      App.create(source, dest, context);\n      console.log('[%s] Try running the app (use `up` to run in a container). Enter:\\n%s\\n%s\\n%s or %s',\n        chalk.bold('OK'),\n        chalk.bold('   cd ' + context.name),\n        chalk.bold('   npm install'),\n        chalk.bold('   atomiq run'),\n        chalk.bold('atomiq up'));\n    } catch (err) {\n      console.log('[%s] %s', chalk.red('error'), err.message);\n      process.exit(1);\n    }\n  });\n}\n\nfunction runContainer(options) {\n  const log = debug('atomiq:new');\n  log('Run app in a container');\n  try {\n    App.up(options);\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message);\n    process.exit(1);\n  }\n}\n\nfunction testContainer(options) {\n  const log = debug('atomiq:app:test');\n  log('Run tests in a container');\n  try {\n    App.test(options);\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message);\n    process.exit(1);\n  }\n}\n\nfunction debugContainer(options) {\n  const log = debug('atomiq:app:debug');\n  log('Debug app running in a container');\n  try {\n    App.debug(options);\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message);\n    process.exit(1);\n  }\n}\n"]}